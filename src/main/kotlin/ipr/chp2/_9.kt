/**
 * Лямбда-выражения
 * */

package ipr.chp2

/**
 * Лямбда-выражения представляют небольшие кусочки кода, которые выполняют некоторые действия.
 * Фактически лямбды представляют сокращенную запись функций. При этом лямбды, как и обычные и анонимные функции,
 * могут передаваться в качестве значений переменным и параметрам функции.
 * Лямбда-выражения оборачиваются в фигурные скобки
 * */
fun main() {
    //присвоения переменной значения лямбда выражения
    val print5 = { println(5) }
    print5()// вывод 5

    //присвоения переменной значения лямбда выражения с передачей параметров
    val concatPrint = { s1: String, s2: String -> println("$s1$s2") }
    concatPrint("1", "2") // вывод 12

    //присвоения переменной значения лямбда выражения с возвращением результата
    val sum = { n1: Int, n2: Int -> n1 + n2 }
    println(sum(1, 2)) // вывод 3

    //Лямбда-выражения как аргументы функций
    println(doWork(5) { num: Int ->
        println(num)
        num + 5
    }) // вывод 10

    // при передаче типы параметров лямбды можно опустить
    println(doWork(5) { num ->
        println(num)
        num + 10
    })// вывод 15

    // trailing lambda
    //Если параметр, который принимает функцию, является последним в списке, то при передаче ему лямбда-выражения,
    // саму лямбду можно прописать после списка параметров
    val trailingLambdaResult = doWork(5) {num -> num + 1}
    println(trailingLambdaResult) // вывод 6

    //Возвращение лямбда-выражения из функции
    val eq = getLambdaStrEqals()
    println(eq("a","a")) // вывод true

    //Неиспользуемые параметры
    val nonReqaredParamResult = doWork(5) {_ :Int -> 0} // если параметры не используются '_ :Int ->' можно опустить до {0}
    println(nonReqaredParamResult) // Вывод 0

}


/**
 * Функция для возвращение лямбда-выражения из функции
 * @return lambda для сравнения строк
 * */
fun getLambdaStrEqals() = {str1:String, str2:String -> str1 == str2}
