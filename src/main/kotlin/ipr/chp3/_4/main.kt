/**
 * Наследование
 * */

package ipr.chp3._4

/**
 * Наследование позволяет создавать классы, которые расширяют функциональность или изменяют поведение
 * уже существующих классов. В отношении наследования выделяются два ключевых компонента. Прежде всего это базовый класс
 * (класс-родитель, родительский класс, суперкласс), который определяет базовую функциональность. И производный класс
 * (класс-наследник, подкласс), который наследует функциональность базового класса и может расширять или модифицировать ее.
 *
 * * Чтобы функциональность класса можно было унаследовать, необходимо определить для этого класса аннотацию open
 * Синтаксис
 * open class базовый_класс
 * class производный_класс: базовый_класс
 *
 * * !!!все классы по умолчанию наследуются от класса Any!!!
 * */
fun main() {
    val p1: Person = Person("Tom")
    p1.display()// вывод Tom
    val worker:Worker = Worker("Sam", 25)
    worker.display()
    Worker()
}

// родительский класс должен быть помечен как open
open class Person(val name:String) {
    fun display() = println(name)
}
// класс наследник
class Worker(name:String, var age:Int) : Person(name) {

    /*
    * вторичный конструктор без параметров, если есть первичный конструктор то вызов родительского конструктора
    * осуществляется через вызов первичного конструктора текущего класса, то есть this
    * */
    constructor() : this("undefined", 0)

    // Если первичный конструктор отсутствует, то вызов базового конструктора осуществляется через super
    //constructor() : super("undefined")


}

