/**
 * Введение в корутины
 * */

package ipr.chp7._1

import kotlinx.coroutines.*

/**
 * * Добавление kotlinx.coroutines
 * корутин (библиотека kotlinx.coroutines) по умолчанию не включена в проект. И нам ее надо добавить.
 * Если мы создаем проект консольного приложения в IntelliJ IDEA, то мы можем добавить соответствующую библиотеку в проект.
 * Для этого в меню File -> Project Structure -> Libraries -> Add на 3 панели(столбце) -> выбираем kotlinx либо если более старая версия то kotlinx-coroutines-core-jvm.jar
 *
 * если проект другого типа например gradle то добавляется зависимость implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:номер версии")
 *
 *
 * */

/**
 * Определение suspend-функции
 * Модификатор suspend определяет функцию, которая может приостановить свое выполнение и возобновить его через некоторый период времени,
 * а так же разрешает работу ряда функция таких как например delay
 *
 * корутина может вызываться только в контексте корутины для этого применяется функция coroutineScope() - создает контекст корутины
 *  coroutineScope() может применяться только в функции с модификатором suspend
 *
 *  в конце функции main вызывается функция println(), которая выводит строку на консоль. Если мы ее удалим,
 *  то мы столкнемся с ошибкой - функция main должна возвращать значение Unit. В этом случае мы можем либо явным образом возвратить значение Unit
 *  Либо можно типизировать функцию coroutineScope типом Unit:
    suspend fun main() = coroutineScope<Unit> {
        launch {
            doWork()
        }
    }
 *
 *
 * */


//Определение корутины
suspend fun main() = coroutineScope {
    // launch область выполнения паралельных задач
    // в теле фнаходятся функции которые выполняются паралельно остальные действия синхронны
    launch {
        doWork()
    }
    println("Hello Coroutines")
    //Unit // если нет синхронных выполнений
}

//Вынесение кода корутин в отдельную функцию
suspend fun doWork() {
    for (i in 0..5) {
        println(i)
        delay(400L)
    }
}

