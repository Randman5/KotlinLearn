/**
 * Типы данных
 * */

package ipr.chp1

/**
 * * Целочисленные типы
 * Byte: хранит целое число от -128 до 127 и занимает 1 байт
 * Short: хранит целое число от -32 768 до 32 767 и занимает 2 байта
 * Int: хранит целое число от -2 147 483 648 (-231) до 2 147 483 647 (231 - 1) и занимает 4 байта
 * Long: хранит целое число от –9 223 372 036 854 775 808 (-263) до 9 223 372 036 854 775 807 (263-1) и занимает 8 байт
 *
 * * В последней версии Kotlin также добавлена поддержка для целочисленных типов без знака:
 * UByte: хранит целое число от 0 до 255 и занимает 1 байт
 * UShort: хранит целое число от 0 до 65 535 и занимает 2 байта
 * UInt: хранит целое число от 0 до 232 - 1 и занимает 4 байта
 * ULong: хранит целое число от 0 до 264-1 и занимает 8 байт
 *
 * * Числа с плавающей точкой
 * Float: хранит число с плавающей точкой от -3.4*1038 до 3.4*1038 и занимает 4 байта
 * Double: хранит число с плавающей точкой от ±5.0*10-324 до ±1.7*10308 и занимает 8 байта.
 *
 * * Логический тип Boolean
 * Boolean: значения false/true занимает неизвестно в офф документации котлина не указанно в JVM может занимать либо 4 байта как int лиюо 1 бит
 *
 * * Символьный тип представляет 16-битный символ Юникода
 * Char: представляет 1 символ которые заключается в одинарные кавычки
 *
 * * Строка
 * String. Строка представляет последовательность символов, заключенную в двойные кавычки, либо в тройные двойные кавычки.
 *
 * * Динамический
 * Any: Статическая типизация и тип Any позволяет имитировать динамическую типизацию переменная может хранить любой тип
 *
 * */

fun main() {

    //Целочисленные типы
    val byteVar: Byte = -24
    val shortVar: Short = -32768
    val intVar: Int = -2147483648
    val longVal: Long = -9223372036854775807
    println(byteVar)
    println(shortVar)
    println(intVar)
    println(longVal)

    // Беззнаковые типы не имеют отризательного значения постфикс U у значения обязательный
    val uByteVar: UByte = 24U
    val uShortVar: UShort = 32768U
    val uIntVar: UInt = 2147483648U
    val uLongVal: ULong = 9223372036854775807U
    println(uByteVar)
    println(uShortVar)
    println(uIntVar)
    println(uLongVal)

    // Шестнадцатеричная запись синтаксис 0x<шестнадцатеричное число>
    val num16: Int = 0x21 // 0x21 = 33
    println(num16)

    // Шестнадцатеричная запись, синтаксис 0b<двоичное число>
    val num2: Int = 0b0101 // 0b0101 = 5
    println(num2)

    // числа с плавующей точко
    val doubleVar: Double = 1.78
    val doubleVarExp: Double = 23e3 // Double поддерживае экспоненциальную запись
    println(doubleVar)

    // постфикс F обязательный при при присвоении переменной типа Float
    val floatVar: Float = 3.14F
    println(floatVar)

    // Логический тип Boolean
    var boolVar: Boolean = false
    println(boolVar)
    boolVar = true
    println(boolVar)

    // Символы
    val charVal: Char = 'A' // символ указывается в одинарных кавычках
    println(charVal)

    // Строки
    val stringVal1: String = "stringVar1"
    println(stringVal1)

    /*
        Строка может содержать специальные символы или эскейп-последовательности.
        Например, если необходимо вставить в текст перевод на другую строку,
        можно использовать эскейп-последовательность \n и др:
    */
    val stringVal2: String = "stringVar2\t"
    println(stringVal2)

    // многострочная строка используются тройные кавычки
    val stringVal3: String =
"""
            string Val3
"""
    println(stringVal3)

    /*
        Шаблоны строк (string templates) указываются в случае 1 переменной через $
        если что то более сложное, то через ${инструкции}
    */
    val stringVal4: String = "$stringVal1 ${stringVal2 + stringVal2}"
    println(stringVal4)

    //Выведение типа
    /*
     Kotlin позволяет выводить тип переменной на основании данных, которыми переменная инициализируется.
     Поэтому при инициализации переменной тип можно опустить
     !!!нельзя создавать переменную с выведением типа без инициализации val age Ошибка, переменная не инициализирована!!!
    */
    val autoType = "string" // тип переменной определиться как String
    println(autoType)
    val autoType2 = 123 // тип переменной определиться как Int
    println(autoType2)

    /*
        Любые целые числа, воспринимаются как данные типа Int.
        Если же мы хотим явно указать, что число представляет значение типа Long, то следует использовать суффикс L:
    */
    val autoType3 = 455L // тип переменной определиться как Long
    println(autoType3)

    // Статическая типизация и тип Any позволяет имитировать динамическую типизацию переменная может хранить любой тип
    var name: Any = "Tom"
    println(name)   // Tom
    name = 6758
    println(name)   // 6758

}