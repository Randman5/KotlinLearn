/**
 * Диспетчер корутины
 * */

package ipr.chp7._5

import kotlinx.coroutines.*

/**
 *
 * Контекст корутины включает себя такой элемент как диспетчер корутины.
 * Диспетчер корутины определяет какой поток или какие потоки будут использоваться для выполнения корутины.
 * Все построители корутины, в частности, функции launch и async в качестве необязательного параметра принимают объект типа CoroutineContext,
 * который может использоваться для определения диспетчера создаваемой корутины.
 *
 * Поскольку контекст корутин в функции main создается в данном случае с помощью функции coroutineScope,
 * которая устанавливает для создаваемых корутин по умолчанию диспетчер типа Dispatcher.Default.
 *
 * * Dispatcher types
 * Dispatchers.Default: применяется по умолчанию, если тип диспетчера не указан явным образом. Этот тип использует общий пул разделяемых фоновых потоков и подходит для вычислений, которые не работают с операциями ввода-вывода (операциями с файлами, базами данных, сетью) и которые требуют интенсивного потребления ресурсов центрального процессора.
 *
 *!?!* Dispatchers.IO: использует общий пул потоков, создаваемых по мере необходимости, и предназначен для выполнения операций ввода-вывода
 * (например, операции с файлами или сетевыми запросами).
 *
 *!?!* Dispatchers.Main: применяется в графических приложениях, например, в приложениях Android или JavaFX.
 *
 *!?!* Dispatchers.Unconfined: корутина не закреплена четко за определенным потоком или пулом потоков.
 * Она запускается в текущем потоке до первой приостановки. После возобновления работы корутина продолжает работу в одном из потоков, который сторого не фиксирован. Разработчики языка Kotlin в обычной ситуации не рекомендуют использовать данный тип.
 *
 *!?!* newSingleThreadContext и newFixedThreadPoolContext: позволяют вручную задать поток/пул для выполнения корутины
 * */
suspend fun main() = coroutineScope {

    // по умолчанию запускает Dispatchers.Default
    launch {
        println("выполняется в потоке ${java.lang.Thread.currentThread().name}")// поток вычислений DefaultDispatcher-worker

        // пример диспетчера для потоков ввода вывода !!!нельзя вызывать main поток!!!
        launch(Dispatchers.IO) {
            println("(вызванно из асинхронного потока) выполняется в потоке ${java.lang.Thread.currentThread().name}")// основной поток main
        }
    }
    println("выполняется в потоке ${java.lang.Thread.currentThread().name}")// основной поток main
}