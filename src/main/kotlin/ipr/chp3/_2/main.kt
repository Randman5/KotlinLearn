/**
 * Конструкторы
 * */

package ipr.chp3._2


/**
 * * Для создания объекта необходимо вызвать конструктор класса. По умолчанию компилятор создает конструктор,
 * который не принимает параметров и который мы можем использовать. Но также мы можем определять свои собственные конструкторы.
 * Для определения конструкторов применяется ключевое слово constructor.
 *
 * * Классы в Kotlin могут иметь один первичный конструктор (primary constructor)
 * и один или несколько вторичных конструкторов (secondary constructor).
 * Синтаксис первичного конструктора class имя класса constructor(имя свойства: String){}
 * Если первичный конструктор не имеет никаких аннотаций или модификаторов доступа, как в данном случае, то ключевое слово constructor можно опустить
 *
 * * Инициализатор
 * Данные переданные в конструктор можно использовать для инициализации свойств класса. Для этого применяются блоки инициализаторов
 *
 * * Первичный конструктор и свойства
 * Первичный конструктор также может использоваться для определения свойств
 *
 * * Вторичные конструкторы
 * Вторичные конструкторы определяются в теле класса. Если для класса определен первичный конструктор,
 * то вторичный конструктор должен вызывать первичный с помощью ключевого слова this
 *
 * */
fun main() {
    //первый пример
    val p1 = Person("tom")
    println(p1.name) // вывод том

    //второй пример
    val p2 = Person2("tom")
    println(p2.name) // вывод том

    //третий пример
    val p3 = Person3("tom", 23)
    println("${p3.name} ${p3.age}") // вывод том 23

    //создание объекта через вторичный конструктор 1 параметром
    val p4 = Person3("tom",)
    println("${p4.name} ${p4.age}") // вывод том 0

    ////создание объекта через вторичный конструктор без параметров
    val p5 = Person3()
    println("${p5.name} ${p5.age}") // вывод undefined 0


}


//Первичный конструктор
class Person constructor(_name: String) {// или class Person(_name: String) Если первичный конструктор не имеет никаких аннотаций или модификаторов доступа

    var name: String

    //Инициализатор
    init {
        //Присвоение полученного в конструкторе значения _name свойству name
        name = _name
    }
}


//параметры первичного конструктора можно напрямую передавать свойствам
class Person2(_name: String) {
    var name: String = _name
}


// определение свойств в конструкторе
class Person3(var name: String, var age:Int) {

    //вторичный конструктор
    constructor(_name:String): this(_name, 0) {
        //вызов инструкций
    }

    //вторичный конструктор безпараметров
    constructor(): this("undefined", 0) {
        //вызов инструкций
    }

}